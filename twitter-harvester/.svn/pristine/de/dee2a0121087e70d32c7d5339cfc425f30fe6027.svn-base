package gr.cite.nasa.www.harvester;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBException;

import gr.cite.nasa.www.client.TwitterApiClient;
import gr.cite.nasa.www.core.Location;
import gr.cite.nasa.www.core.Place;
import gr.cite.nasa.www.core.TrendWrapper;
import gr.cite.nasa.www.queries.GeoPlanetQueries;
import gr.cite.nasa.www.queries.TwitterQueries;
import gr.cite.nasa.www.datastore.DatastoreClient;
import gr.cite.nasa.www.datastore.mongo.MongoDatastoreClient;

public class Harvester {

	private DatastoreClient datastoreClient;

	private TwitterApiClient twitterClient;

	public Harvester(DatastoreClient datastoreClient, TwitterApiClient twitterClient) {

		super();
		this.datastoreClient = datastoreClient;
		this.twitterClient = twitterClient;
	}

	public void harvest() throws JAXBException, IOException {

		List<Location> listOfLocations = twitterClient.getAvailableTrends();

		GeoPlanetQueries geoPlanetQueries = new GeoPlanetQueries(
				"dj0yJmk9MWt2a3Rxb0kxN0ZMJmQ9WVdrOWQxUnVSVkZPT" + "ldVbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD1jZA");

		List<Location> listOfLocationsWithGeo = new ArrayList<Location>();

		for (Location location : listOfLocations) {

			Place place = geoPlanetQueries.woeidIntoBB(location.getWoeid());

			location.setCentroidLatitude(place.getCentroid().getLatitude());
			location.setCentroidLongitude(place.getCentroid().getLongitude());
			location.setNorthEastLatitude(place.getBoundingBox().getNorthEast().getLatitude());
			location.setNorthEastLongitude(place.getBoundingBox().getNorthEast().getLongitude());
			location.setSouthWestLatitude((place.getBoundingBox().getSouthWest().getLatitude()));
			location.setSouthWestLongitude(place.getBoundingBox().getSouthWest().getLongitude());
			location.setAreaRank(place.getAreaRank());
			location.setPopRank(place.getPopRank());

			listOfLocationsWithGeo.add(location);
		}

		// datastoreClient.insertLocationData(listOfLocationsWithGeo);

		for (Location location : listOfLocationsWithGeo) {
			checkDuplicateLocations(location);
		}

		// int counter = 0;

		for (Location location : listOfLocationsWithGeo) {

			List<TrendWrapper> listOfTrends = twitterClient.getTrendsPlace(location);

			datastoreClient.insertTrendData(listOfTrends, location.getlID());

			for (TrendWrapper trendWrapper : listOfTrends) {
				datastoreClient.insertTrendIntoLocation(location.getlID(), trendWrapper.getTid());
			}

			/*
			 * counter++ ; if ((counter % 15) == 0){ try { Thread.sleep(900000);
			 * } catch (InterruptedException e) { e.printStackTrace(); } }
			 */
		}
	}

	public void checkDuplicateLocations(Location location) {

		Location locationInDB = datastoreClient.getLocationByWoeid(location.getWoeid());

		if (!location.equals(locationInDB)) {
			datastoreClient.insertLocation(location);
		}
	}

	public static void main(String[] args) throws JAXBException, IOException {

		DatastoreClient datastoreClient = new MongoDatastoreClient();
		TwitterApiClient twitterClient = new TwitterQueries("jDDsnpBYjRc2VI4ahrudyL6b2",
				"YpLWuEAYgZO27KQAsZc9nI4JEYwM7oMEHEOXBimuDSE3DuKxHH");

		Harvester harvester = new Harvester(datastoreClient, twitterClient);
		harvester.harvest();

	}
}